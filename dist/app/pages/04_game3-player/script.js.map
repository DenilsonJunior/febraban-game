{"version":3,"sources":["script.js"],"names":["measures","canvasW","canvasH","timeGame","workAll","let","pointMulti","definedWords","document","gameWordSearch","window","countWord","word","WordSearch","activeTime","countdownTimer","$","trigger","gameCurrent","wordsBase","setTimeout","text","game","_this","this","puzzleWidth","puzzleHeight","each","tileHeight","index","value","words","push","removerAcentos","toLowerCase","drawLineAlpha","preload","puzzle","refresh","wordList","backgroundColor","tileWidth","drawLineColor","solution","drawLineThickness","highlightTintContainer","highlightTintIndice","highlightTint","column","drawLine","startWord","isSelecting","onInputUp","firstLetter","onInputOver","endLetter","foundWords","prototype","forEach","load","tile","orientation","entry","length","letter","nameIMG","spritesheet","x","scaleRatio","devicePixelRatio","scale","scaleMode","Phaser","ScaleManager","SHOW_ALL","x_InitSolution","x_SecondCol","y","create","stage","wordfind","newPuzzle","width","height","solve","found","listContainer","grid","add","group","li","row","classList","addEventListener","data","events","onInputDown","startLetterSelect","console","stopLetterSelect","overLetter","onInputOut","outLetter","updateDrawLine","pointer","clear","lineStyle","querySelector","indice","createElement","tinta","letters","error","input","selection","tw","gameWon","worldScale","_containerTela","moveTo","worldPosition","th","checkLetterAlignment","getLetterAt","getChildAt","bottom","first","result","selectedWord","concat","left","Math","clearLine","highlightCorrectWord","element","right","tint","replace","getSelectedLetters","setAll","starter","sprite","frame","á","completeWord","startRow","startColumn","endRow","endColumn","Ó","ü","abs","top","state","last","min","max","inverse","Utils","reverseString","checkSelectedLetters","s","map","â","Â","à","À","Á","ê","Ê","è","È","î","Î","ì","Ì","í","Í","õ","Õ","ô","Ô","ò","Ü","û","Û","ú","Ú","ù","Ù","a","Game","CANVAS","ready"],"mappings":"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","file":"script.js","sourcesContent":["const measures = {\n  canvasW: 920,\n  canvasH: 910,\n};\n\nconst gameCurrent = 3;\nconst timeGame = 60 * 1; ///60\nlet workAll = 0;\nconst pointMulti = 10;\nconst definedWords = [\n  \"Compliance\",\n  \"Crédito\",\n  \"ESG\",\n  \"LGPD\",\n  \"SAC\",\n  \"PLDFT\",\n  \"Libras\",\n  \"Sustentabilidade\",\n  \"Preparatório\",\n  \"Correspondentes\",\n];\n\n$(document).ready(function () {\n  gameWordSearch();\n});\n\nfunction countWord(word) {\n  workAll += word;\n}\n\nfunction activeTime() {\n  window.countdownTimer(timeGame, () => {\n    $(\"body\").trigger(\"game\", [gameCurrent, workAll * pointMulti]);\n  });\n}\n\nfunction completeWord() {\n  setTimeout(function () {\n    $(\"body\").trigger(\"game\", [gameCurrent, workAll * pointMulti]);\n  }, 1000 * 1);\n}\n\nfunction gameWordSearch() {\n  $(\".info .value\").text(\"01:00\");\n  var WordSearch = {};\n\n  WordSearch.Game = function (game) {\n    //  This is your word list. Add or remove any words you like in here.\n    //  The words mustn't contain any spaces or numbers.\n\n    //  The shorter the array, the larger the letter tiles will scale in-game.\n\n    var _this = this;\n    this.words = [];\n    this.wordsBase = definedWords;\n\n    //this.wordsBase = ['Colaboração', 'Proximidade'];\n\n    $.each(this.wordsBase, function (index, value) {\n      _this.words.push(_this.removerAcentos(value).toLowerCase());\n    });\n\n    this.letters = [\n      \"A\",\n      \"B\",\n      \"C\",\n      \"D\",\n      \"E\",\n      \"F\",\n      \"G\",\n      \"H\",\n      \"I\",\n      \"J\",\n      \"K\",\n      \"L\",\n      \"M\",\n      \"N\",\n      \"O\",\n      \"P\",\n      \"Q\",\n      \"R\",\n      \"S\",\n      \"T\",\n      \"U\",\n      \"V\",\n      \"W\",\n      \"X\",\n      \"Y\",\n      \"Z\",\n      \"Ç\",\n      \"Ã\",\n      \"É\",\n      \"Ó\",\n    ];\n\n    this.puzzle = null;\n    this.solution = null;\n\n    //  The BitmapFont word list down the side\n    this.wordList = {};\n\n    //  The dimensions of the word search, in letters (not pixels)\n    //  You can set a fixed size here.\n    //  Or set to -1 means it'll adapt to fit the longest word in the words array.\n    this.puzzleWidth = -1;\n    this.puzzleHeight = -1;\n\n    //  The size of each letter sprite sheet, in pixels\n    this.tileWidth = 100;\n    this.tileHeight = 100;\n\n    //  The selection line color and thickness\n    this.drawLineColor = 0x00ff00;\n    this.drawLineAlpha = 0.6;\n    this.drawLineThickness = 26;\n\n    //  A tint applied to the letters when a word is found\n    // this.highlightTintContainer = [\"#E90F6A\", \"#0bb7e1\", \"#D9F339\"];\n    this.highlightTintContainer = [\n      \"#D9F339\",\n      \"#D9F339\",\n      \"#D9F339\",\n      \"#D9F339\",\n      \"#D9F339\",\n      \"#D9F339\",\n      \"#D9F339\",\n      \"#D9F339\",\n      \"#D9F339\",\n      \"#D9F339\",\n    ];\n    this.highlightTintIndice = 0;\n    this.highlightTint = 0xffff00;\n\n    //  Booleans to control the game during play\n    this.drawLine = null;\n\n    this.isSelecting = false;\n    this.firstLetter = null;\n    this.endLetter = null;\n    this.foundWords = [];\n  };\n\n  WordSearch.Game.prototype = {\n    preload: function () {\n      //this.load.script('wordfind', 'libs/wordfind.js');\n\n      this.load.path = \"../../assets/img/game3/\";\n\n      this.load.bitmapFont(\"azo\");\n\n      var _this = this;\n\n      this.letters.forEach(function (letter) {\n        var nameIMG = letter;\n\n        if (letter == \"Ã\") nameIMG = \"A1\";\n        else if (letter == \"Ç\") nameIMG = \"C1\";\n        else if (letter == \"É\") nameIMG = \"E1\";\n        else if (letter == \"Ó\") nameIMG = \"O1\";\n\n        _this.load.spritesheet(\n          letter.toLowerCase(),\n          nameIMG + \".png\",\n          _this.tileWidth,\n          _this.tileHeight\n        );\n      });\n\n      this.scaleRatio = window.devicePixelRatio / 3;\n\n      _this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\n      _this.scale.setShowAll();\n\n      window.addEventListener(\"resize\", function () {\n        _this.scale.refresh();\n      });\n      _this.scale.refresh();\n    },\n\n    create: function () {\n      this.stage.backgroundColor = \"#ffffff\";\n\n      activeTime();\n\n      if (this.puzzleWidth !== -1) {\n        this.puzzle = wordfind.newPuzzle(this.words, {\n          width: this.puzzleWidth,\n          height: this.puzzleHeight,\n        });\n      } else {\n        this.puzzle = wordfind.newPuzzle(this.words);\n        this.puzzleWidth = this.puzzle[0].length;\n        this.puzzleHeight = this.puzzle.length;\n      }\n\n      var solution = wordfind.solve(this.puzzle, this.words);\n\n      this.solution = solution.found;\n\n      //  Un-comment these to Debug the puzzle, the first outputs the puzzle to the console\n      //  The second outputs the answers object\n\n      // wordfind.print(this.puzzle);\n      // console.log(this.solution);\n\n      //  Create the letter tile grid\n\n      var x = 0;\n      var y = 0;\n      var _this = this;\n\n      this.grid = this.add.group();\n      this.grid.inputEnableChildren = true;\n\n      this.puzzle.forEach(function (row) {\n        row.forEach(function (letter) {\n          var tile = _this.grid.create(x, y, letter, 0);\n\n          tile.data.row = x / _this.tileWidth;\n          tile.data.column = y / _this.tileHeight;\n          tile.data.words = {};\n          tile.data.letter = letter;\n          tile.data.startWord = false;\n\n          tile.events.onInputDown.add(_this.startLetterSelect, _this);\n          tile.events.onInputUp.add(_this.stopLetterSelect, _this);\n          tile.events.onInputOver.add(_this.overLetter, _this);\n          tile.events.onInputOut.add(_this.outLetter, _this);\n\n          x += _this.tileWidth;\n        });\n\n        x = 0;\n        y += _this.tileHeight;\n      });\n\n      //  Flag all of the starting letters in the grid\n      this.solution.forEach(function (entry) {\n        //  Based on the grid position we can get the tile index\n        var index = entry.y * _this.puzzleWidth + entry.x;\n\n        var tile = _this.grid.getChildAt(index);\n\n        tile.data.startWord = true;\n        tile.data.words[entry.word] = {\n          orientation: entry.orientation,\n          length: entry.word.length,\n        };\n      });\n\n      //  This controls the position and scale of the word search grid\n      //  Setting the width / height automatically scales the Group\n      //  If you remove this, the tiles will be displayed at their full size\n      //\n      //  Use it to position the grid within your game, and make sure it fits\n      //  no matter how many words are in it.\n\n      this.grid.x = 45;\n      this.grid.y = 45;\n      this.grid.width = 827;\n      this.grid.height = 816;\n\n      //  Display the words to find down the right-hand side, and add to the wordList object\n\n      var x_InitSolution = 40;\n      var y_InitSolution = 880;\n      var x_SecondCol = 400;\n\n      x = x_InitSolution;\n      y = y_InitSolution;\n\n      // Palavras dicas\n      // this.solution.forEach(function (entry, indice) {\n      //   //  One BitmapText per word (so we can change their color when found)\n      //   var style = {\n      //     font: \"30px Arial\", ///Import: Usar sempre Arial para nao quebrar a font\n      //     fill: \"0x000000\",\n      //     align: \"left\",\n      //   };\n\n      //   x = indice < 5 ? x : x_SecondCol; /// Da quinta palavra já cria a segunda coluna\n      //   y = indice == 5 ? y_InitSolution : y;\n\n      //   var _palavras = _this.add.text(x, y, _this.wordsBase[indice], style);\n      //   _palavras.fontWeight = \"bold\";\n\n      //   _this.wordList[entry.word] = _palavras;\n\n      //   y += 42;\n      // });\n\n      // Verifique se a lista de palavras existe no DOM\n      const listContainer = document.querySelector(\"ul.listPalavras\");\n\n      // Se a lista de palavras existir no DOM\n      if (listContainer) {\n        // Iterar sobre cada entrada na solução\n        this.solution.forEach((entry, indice) => {\n          // Criar um elemento <li> para representar a palavra\n          const li = document.createElement(\"li\");\n          li.textContent = this.wordsBase[indice];\n\n          // Adicionar o elemento <li> à lista de palavras\n          listContainer.appendChild(li);\n\n          // Armazenar uma referência ao elemento de texto criado para a palavra correspondente\n          this.wordList[entry.word] = li;\n\n          // Adicionar uma classe CSS para estilizar a palavra\n          li.classList.add(\"word\");\n\n          // Adicionar um evento de clique para marcar a palavra como visitada\n          li.addEventListener(\"click\", () => {\n            // Marcar a palavra como visitada adicionando uma classe CSS\n            li.classList.add(\"visited\");\n          });\n        });\n      } else {\n        // Se a lista de palavras não existir no DOM, exibir um erro no console\n        console.error(\n          \"A lista de palavras (ul.listPalavras) não foi encontrada no DOM.\"\n        );\n      }\n\n      //  The Graphics object that controls the letter selection line\n\n      this.drawLine = this.add.graphics(0, 0);\n\n      //  This starts a callback going, that updates whenever the mouse moves,\n      //  and calls updateDrawLine. All of the main game logic happens as a result\n      //  of events triggered within here, and the letter tile input handlers.\n\n      this.input.addMoveCallback(this.updateDrawLine, this);\n    },\n\n    /**\n     * Draws the selection line, showing which letter tiles are being selected.\n     */\n    updateDrawLine: function (pointer, x, y) {\n      if (!this.isSelecting) {\n        return;\n      }\n\n      this.drawLine.clear();\n\n      this.drawLine.lineStyle(\n        this.drawLineThickness,\n        this.drawLineColor,\n        this.drawLineAlpha\n      );\n\n      var tw = (this.tileWidth * this.firstLetter.worldScale.x) / 2;\n      var th = (this.tileHeight * this.firstLetter.worldScale.y) / 2;\n\n      this.drawLine.moveTo(\n        this.firstLetter.worldPosition.x + tw,\n        this.firstLetter.worldPosition.y + th\n      );\n\n      this.drawLine.lineTo(x, y);\n    },\n\n    /**\n     * Called when the mouse is pressed down on any of the letter tiles.\n     */\n    startLetterSelect: function (letter) {\n      this.isSelecting = true;\n\n      this.firstLetter = letter;\n    },\n\n    /**\n     * Called when the mouse is released from any of the letter tiles.\n     * This performs all of the core checks in terms of if they've selected\n     * a full word, won the game, etc.\n     */\n    stopLetterSelect: function (letter) {\n      this.isSelecting = false;\n\n      //  Let's check to see if they selected an actual word :)\n      if (\n        this.firstLetter &&\n        this.endLetter &&\n        this.firstLetter !== this.endLetter &&\n        (this.firstLetter.data.startWord || this.endLetter.data.startWord) &&\n        this.checkLetterAlignment(this.endLetter)\n      ) {\n        var result = this.checkSelectedLetters();\n\n        if (result) {\n          this.highlightCorrectWord(result);\n          this.foundWords.push(result.word);\n        }\n\n        //  Check word list, game won?\n        if (this.foundWords.length === this.solution.length) {\n          this.gameWon();\n        }\n      }\n\n      this.grid.setAll(\"frame\", 0);\n\n      this.clearLine();\n    },\n\n    /**\n     * Clears the selection line, and resets the first and last letters.\n     */\n    clearLine: function () {\n      this.firstLetter = false;\n      this.endLetter = null;\n\n      this.drawLine.clear();\n    },\n\n    /**\n     * Called from within stopLetterSelect and both tints the BitmapText word\n     * on the right-hand side, and also tints each tile that was matched.\n     *\n     * If you're going to use a different kind of effect, then you probably want\n     * to edit or skip most of this function.\n     */\n    highlightCorrectWord: function (result) {\n      var _this = this;\n\n      countWord(1);\n\n      //  result contains the sprites of the letters, the word, etc.\n      var tinta = this.highlightTintContainer[this.highlightTintIndice];\n      this.wordList[result.word].fill = tinta;\n\n      var element = this.wordList[result.word];\n\n      // Verifica se o elemento foi encontrado\n      if (element) {\n        // Adiciona a classe 'visited' ao elemento\n        element.classList.add(\"visited\");\n      } else {\n        console.error(\n          \"Elemento não encontrado para a palavra-chave:\",\n          result.word\n        );\n      }\n\n      result.letters.forEach(function (letter) {\n        letter.tint = tinta.replace(\"#\", \"0x\");\n      });\n\n      this.highlightTintIndice += 1;\n    },\n\n    /**\n     * Called by the letter tile input handler when it is moused over.\n     * In short, it checks if it should swap frame or not.\n     */\n    overLetter: function (letter) {\n      if (this.isSelecting) {\n        if (this.checkLetterAlignment(letter)) {\n          this.endLetter = letter;\n\n          //  Highlight the tiles below the line (if any)\n          var selection = this.getSelectedLetters();\n\n          if (selection && selection.letters.length > 0) {\n            this.grid.setAll(\"frame\", 0);\n\n            selection.letters.forEach(function (sprite) {\n              sprite.frame = 1;\n            });\n          }\n        }\n      } else {\n        letter.frame = 1;\n      }\n    },\n\n    /**\n     * Swaps the letter frame back, if not in selecting mode.\n     */\n    outLetter: function (letter) {\n      if (!this.isSelecting) {\n        letter.frame = 0;\n      }\n    },\n\n    /**\n     * Called once all words have been found.\n     */\n    gameWon: function (_containerTela) {\n      completeWord();\n    },\n\n    //  From this point on, all of the functions deal with checking the letters,\n    //  getting selected letters, and checking for word matching. There is no\n    //  display related code in any of the following, it's all game logic.\n\n    checkLetterAlignment: function (letter) {\n      var startRow = this.firstLetter.data.row;\n      var startColumn = this.firstLetter.data.column;\n      var endRow = letter.data.row;\n      var endColumn = letter.data.column;\n\n      return (\n        startColumn === endColumn ||\n        startRow === endRow ||\n        Math.abs(endColumn - startColumn) === Math.abs(endRow - startRow)\n      );\n    },\n\n    getLetterAt: function (row, column) {\n      var index = column * this.puzzleWidth + row;\n\n      return this.grid.getChildAt(index);\n    },\n\n    getSelectedLetters: function () {\n      if (\n        !this.firstLetter ||\n        !this.endLetter ||\n        this.endLetter === this.firstLetter\n      ) {\n        return false;\n      }\n\n      var first = this.firstLetter.data;\n      var last = this.endLetter.data;\n      var tile;\n      var letters = [];\n      var selectedWord = \"\";\n      var x, y, top, bottom, left, right;\n\n      //  Let's get all the letters between the first and end letters\n\n      if (first.row === last.row) {\n        //  Vertical grab\n\n        top = Math.min(first.column, last.column);\n        bottom = Math.max(first.column, last.column);\n\n        for (y = top; y <= bottom; y++) {\n          tile = this.getLetterAt(first.row, y);\n          letters.push(tile);\n          selectedWord = selectedWord.concat(tile.data.letter);\n        }\n      } else if (first.column === last.column) {\n        //  Horizontal grab\n\n        left = Math.min(first.row, last.row);\n        right = Math.max(first.row, last.row);\n\n        for (x = left; x <= right; x++) {\n          tile = this.getLetterAt(x, first.column);\n          letters.push(tile);\n          selectedWord = selectedWord.concat(tile.data.letter);\n        }\n      } else {\n        top = Math.min(first.column, last.column);\n        bottom = Math.max(first.column, last.column);\n        left = Math.min(first.row, last.row);\n        right = Math.max(first.row, last.row);\n\n        if (first.column > last.column && first.row < last.row) {\n          //  Diagonal NE grab (up and from left to right)\n          y = bottom;\n\n          for (x = left; x <= right; x++) {\n            tile = this.getLetterAt(x, y);\n            letters.push(tile);\n            selectedWord = selectedWord.concat(tile.data.letter);\n            y--;\n          }\n        } else if (first.column < last.column && first.row < last.row) {\n          //  Diagonal SE grab (down and from left to right)\n          y = top;\n\n          for (x = left; x <= right; x++) {\n            tile = this.getLetterAt(x, y);\n            letters.push(tile);\n            selectedWord = selectedWord.concat(tile.data.letter);\n            y++;\n          }\n        } else if (first.column < last.column && first.row > last.row) {\n          //  Diagonal SW grab (down and from right to left)\n          y = top;\n\n          for (x = right; x >= left; x--) {\n            tile = this.getLetterAt(x, y);\n            letters.push(tile);\n            selectedWord = selectedWord.concat(tile.data.letter);\n            y++;\n          }\n        } else if (first.column > last.column && first.row > last.row) {\n          //  Diagonal NW grab (up and from right to left)\n          y = bottom;\n\n          for (x = right; x >= left; x--) {\n            tile = this.getLetterAt(x, y);\n            letters.push(tile);\n            selectedWord = selectedWord.concat(tile.data.letter);\n            y--;\n          }\n        } else {\n          return false;\n        }\n      }\n\n      return {\n        word: selectedWord,\n        inverse: Phaser.Utils.reverseString(selectedWord),\n        letters: letters,\n      };\n    },\n\n    checkSelectedLetters: function () {\n      var selection = this.getSelectedLetters();\n\n      if (selection) {\n        //  It's possible that a single letter could start multiple words in different directions:\n        //\n        //  cow..\n        //  a....\n        //  r....\n\n        var starter = this.firstLetter.data.startWord\n          ? this.firstLetter.data\n          : this.endLetter.data;\n\n        for (var word in starter.words) {\n          if (word === selection.word || word === selection.inverse) {\n            return {\n              word: word,\n              letters: selection.letters,\n            };\n          }\n        }\n      }\n\n      return false;\n    },\n\n    removerAcentos: function (s) {\n      var map = {\n        â: \"a\",\n        Â: \"A\",\n        à: \"a\",\n        À: \"A\",\n        á: \"a\",\n        Á: \"A\",\n        /*\"ã\": \"a\",\n        \"Ã\": \"A\",*/\n        ê: \"e\",\n        Ê: \"E\",\n        è: \"e\",\n        È: \"E\",\n        // é: \"e\",\n        // É: \"E\",\n        î: \"i\",\n        Î: \"I\",\n        ì: \"i\",\n        Ì: \"I\",\n        í: \"i\",\n        Í: \"I\",\n        õ: \"o\",\n        Õ: \"O\",\n        ô: \"o\",\n        Ô: \"O\",\n        ò: \"o\",\n        // Ò: \"O\",\n        // ó: \"o\",\n        Ó: \"O\",\n        ü: \"u\",\n        Ü: \"U\",\n        û: \"u\",\n        Û: \"U\",\n        ú: \"u\",\n        Ú: \"U\",\n        ù: \"u\",\n        Ù: \"U\",\n        /*\"ç\": \"c\",\n        \"Ç\": \"C\"*/\n      };\n\n      return s.replace(/[\\W\\[\\] ]/g, function (a) {\n        return map[a] || a;\n      });\n    },\n  };\n\n  //  Creates the game instance and starts it running\n\n  var game = new Phaser.Game(\n    measures.canvasW,\n    measures.canvasH,\n    Phaser.CANVAS,\n    \"game\"\n  );\n  game.state.add(\"WordSearch.Game\", WordSearch.Game, true);\n}\n"]}